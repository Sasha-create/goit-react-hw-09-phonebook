{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/RegisterView/RegisterView.module.css","views/RegisterView/RegisterView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","RegisterView","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","target","onSubmit","e","preventDefault","authOperations","register","className","s","form","autoComplete","label","type","onChange"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,8B,qGC6E7CC,UAvEM,WAAO,IAAD,EACDC,mBAAS,IADR,mBAClBC,EADkB,KACZC,EADY,OAECF,mBAAS,IAFV,mBAElBG,EAFkB,KAEXC,EAFW,OAGOJ,mBAAS,IAHhB,mBAGlBK,EAHkB,KAGRC,EAHQ,KAKnBC,EAAWC,cAEXC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUT,EAAoB,EAApBA,KAAMT,EAAc,EAAdA,MACtC,OAAQS,GACN,IAAK,OACHC,EAAQV,GACR,MAEF,IAAK,QACHY,EAASZ,GACT,MAEF,IAAK,WACHc,EAAYd,GACZ,MAEF,QACE,SAcN,OACE,gCACE,qJAEA,uBAAMmB,SAdW,SAAAC,GACnBA,EAAEC,iBAEFN,EAASO,IAAeC,SAAS,CAAEd,OAAME,QAAOE,cAEhDH,EAAQ,IACRE,EAAS,IACTE,EAAY,KAOoBU,UAAWC,IAAEC,KAAMC,aAAa,MAA9D,UACE,wBAAOH,UAAWC,IAAEG,MAApB,+BAEE,uBAAOC,KAAK,OAAOpB,KAAK,OAAOT,MAAOS,EAAMqB,SAAUb,OAGxD,wBAAOO,UAAWC,IAAEG,MAApB,2CAEE,uBACEC,KAAK,QACLpB,KAAK,QACLT,MAAOW,EACPmB,SAAUb,OAId,wBAAOO,UAAWC,IAAEG,MAApB,iDAEE,uBACEC,KAAK,WACLpB,KAAK,WACLT,MAAOa,EACPiB,SAAUb,OAId,wBAAQY,KAAK,SAAb","file":"static/js/RegisterView.682900b7.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"RegisterView_form__1yeaY\",\"label\":\"RegisterView_label__ivokl\"};","// import React, { Component } from 'react';\nimport { useState } from 'react';\n// import { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from '../../redux/auth';\nimport s from './RegisterView.module.css';\n\nconst RegisterView = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(authOperations.register({ name, email, password }));\n\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div>\n      <h1>Страница регистрации</h1>\n\n      <form onSubmit={handleSubmit} className={s.form} autoComplete=\"off\">\n        <label className={s.label}>\n          Имя\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n        </label>\n\n        <label className={s.label}>\n          Почта\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label className={s.label}>\n          Пароль\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button type=\"submit\">Зарегистрироваться</button>\n      </form>\n    </div>\n  );\n};\nexport default RegisterView;\n\n// class RegisterView extends Component {\n//   state = {\n//     name: '',\n//     email: '',\n//     password: '',\n//   };\n\n//   handleChange = ({ target: { name, value } }) => {\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onRegister(this.state);\n\n//     this.setState({ name: '', email: '', password: '' });\n//   };\n\n//   render() {\n//     const { name, email, password } = this.state;\n\n//     return (\n//       <div>\n//         <h1>Страница регистрации</h1>\n\n//         <form\n//           onSubmit={this.handleSubmit}\n//           className={s.form}\n//           autoComplete=\"off\"\n//         >\n//           <label className={s.label}>\n//             Имя\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={name}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n\n//           <label className={s.label}>\n//             Почта\n//             <input\n//               type=\"email\"\n//               name=\"email\"\n//               value={email}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n\n//           <label className={s.label}>\n//             Пароль\n//             <input\n//               type=\"password\"\n//               name=\"password\"\n//               value={password}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n\n//           <button type=\"submit\">Зарегистрироваться</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = {\n//   onRegister: authOperations.register,\n// };\n\n// export default connect(null, mapDispatchToProps)(RegisterView);\n"],"sourceRoot":""}